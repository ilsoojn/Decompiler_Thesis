define void @fn_400480(%regset* noalias nocapture) {
entry_fn_400480:
%RIP_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 14
%RIP_init = %regset*
%RIP = alloca i64
%EIP_init = %regset*
%EIP = alloca i32
%RBP_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 9
%RBP_init = %regset*
%RBP = alloca i64
%RSP_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 16
%RSP_init = %regset*
%RSP = alloca i64
%ESP_init = %regset*
%ESP = alloca i32
%EBP_init = %regset*
%EBP = alloca i32
%RAX_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 8
%RAX_init = %regset*
%RAX = alloca i64
%EAX_init = %regset*
%EAX = alloca i32
%1 = lshr i64 %regset*, 8
%ZMM0_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 85
%ZMM0_init = %regset*
%ZMM0 = alloca <16 x float>
%2 = %regset*
%3 = trunc i512 %2 to i128
%XMM0_init = %regset*
%XMM0 = alloca <4 x float>
%4 = %regset*
%5 = trunc i512 %4 to i256
%YMM0_init = %regset*
%YMM0 = alloca <8 x float>
%ZMM1_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 86
%ZMM1_init = %regset*
%ZMM1 = alloca <16 x float>
%6 = %regset*
%7 = trunc i512 %6 to i128
%XMM1_init = %regset*
%XMM1 = alloca <4 x float>
%8 = %regset*
%9 = trunc i512 %8 to i256
%YMM1_init = %regset*
%YMM1 = alloca <8 x float>
%RCX_ptr = getelementptr inbounds %regset, %regset* %0, i32 0, i32 11
%RCX_init = %regset*
%RCX = alloca i64
%ECX_init = %regset*
%ECX = alloca i32
%10 = lshr i64 %regset*, 8
br label %bb_400480
exit_fn_400480: ; preds = %bb_400480
%13 = [%RAX]
%14 = [%RBP]
%15 = [%RCX]
%16 = [%RIP]
%17 = [%RSP]
%18 = [%ZMM0]
%19 = [%ZMM1]
ret void
bb_400480: ; preds = %entry_fn_400480
%RIP_1 = 4195457
%EIP_0 = 4195457
%RBP_0 = %RBP
%RSP_0 = %RSP
%21 = %a
store i64 %RBP, i64* %a, align 1
%RSP_1 = %RSP-8
%ESP_0 = %RSP-8
%RIP_2 = 4195460
%EIP_1 = 4195460
%EBP_0 = %RSP-8
%RIP_3 = 4195462
%EIP_2 = 4195462
%RAX_0 = %RAX
%EAX_0 = %RAX
%EAX_1 = xor i32 %EAX_0, %EAX_0
%RAX_1 = %EAX_1
%22 = lshr i32 %EAX_1, 8
%RIP_4 = 4195470
%EIP_3 = 4195470
%24 = 4195672
%25 = [4195672]
%26 = bitcast double %25 to i64
%ZMM0_0 = %ZMM0
%27 = %ZMM0
%XMM0_0 = %ZMM0
%XMM0_1 = %XMM0_0 : %26
%30 = %ZMM0
%YMM0_0 = %ZMM0
%YMM0_1 = %YMM0_0 : %XMM0_1
%33 = %ZMM0
%ZMM0_1 = %33 : %XMM0_1
%RIP_5 = 4195478
%EIP_4 = 4195478
%37 = 4195680
%38 = [4195680]
%39 = bitcast double %38 to i64
%ZMM1_0 = %ZMM1
%40 = %ZMM1
%XMM1_0 = %ZMM1
%XMM1_1 = %XMM1_0 : %39
%43 = %ZMM1
%YMM1_0 = %ZMM1
%YMM1_1 = %YMM1_0 : %XMM1_1
%46 = %ZMM1
%ZMM1_1 = %46 : %XMM1_1
%RIP_6 = 4195485
%EIP_5 = 4195485
%50 = %b
store i32 0, i32* %b, align 1
%RIP_7 = 4195492
%EIP_6 = 4195492
%52 = %c
store i32 10, i32* %c, align 1
%RIP_8 = 4195497
%EIP_7 = 4195497
%53 = %XMM1_0 : %39
%54 = bitcast i64 %53 to double
%56 = %d
store double %54, double* %d, align 1
%RIP_9 = 4195502
%EIP_8 = 4195502
%57 = %XMM0_0 : %26
%58 = bitcast i64 %57 to double
%60 = %e
store double %58, double* %e, align 1
%RIP_10 = 4195505
%EIP_9 = 4195505
%62 = %c
%ECX_0 = [%RSP-16]
%RCX_0 = %RCX
%RCX_1 = %RSP-16
%63 = lshr i32 [%RSP-16], 8
%RIP_11 = 4195509
%EIP_10 = 4195509
%64 = [%RSP-16]
%65 = bitcast double %64 to i64
%XMM0_2 = %XMM0_1 : %65
%YMM0_2 = %YMM0_1 : %XMM0_2
%ZMM0_2 = %ZMM0_1 : %XMM0_2
%RIP_12 = 4195514
%EIP_11 = 4195514
%72 = %XMM0_1 : %65
%73 = bitcast i64 %72 to double
%75 = %e
%76 = [%RSP-32]
%77 = fmul double %73, %76
%78 = bitcast double %77 to i64
%XMM0_3 = %XMM0_2 : %78
%YMM0_3 = %YMM0_2 : %XMM0_3
%ZMM0_3 = %ZMM0_2 : %XMM0_3
%RIP_13 = 4195519
%EIP_12 = 4195519
%85 = %XMM0_2 : %78
%86 = bitcast i64 %85 to double
%88 = %d
%89 = [%RSP-24]
%90 = fadd double %86, %89
%91 = bitcast double %90 to i64
%XMM0_4 = %XMM0_3 : %91
%YMM0_4 = %YMM0_3 : %XMM0_4
%ZMM0_4 = %ZMM0_3 : %XMM0_4
%RIP_14 = 4195524
%EIP_13 = 4195524
%98 = %XMM0_3 : %91
%99 = bitcast i64 %98 to double
%101 = %f
store double %99, double* %f, align 1
%RIP_15 = 4195525
%EIP_14 = 4195525
%RSP_2 = %RSP
%ESP_1 = %RSP
%103 = %RSP-8
%RBP_1 = [%RSP+8]
%EBP_1 = %RSP+8
%RIP_16 = 4195526
%EIP_15 = 4195526
%104 = %RSP+8
%RIP_17 = %RSP
%ESP_2 = %RSP+8
%EIP_16 = %RSP
%ZF_0 = icmp eq i32 %EAX_1, 0
%SF_0 = icmp slt i32 %EAX_1, 0
%105 = trunc i32 %EAX_1 to i8
%106 = call i8 @llvm.ctpop.i8(i8 %105)
%107 = trunc i8 %106 to i1
%PF_0 = icmp eq i1 %107, false
%108 = zext i1 false to i32
%109 = shl i32 %108, 0
%111 = zext i1 %PF_0 to i32
%112 = shl i32 %111, 2
%114 = zext i1 false to i32
%115 = shl i32 %114, 4
%117 = zext i1 %ZF_0 to i32
%118 = shl i32 %117, 6
%120 = zext i1 %SF_0 to i32
%121 = shl i32 %120, 7
%123 = zext i1 false to i32
%124 = shl i32 %123, 11
%125 = %XMM0_3 : %91
%126 = %XMM1_0 : %39
%127 = %YMM0_3 : %XMM0_4
%128 = %YMM1_0 : %XMM1_1
%129 = %ZMM0_3 : %XMM0_4
%130 = %46 : %XMM1_1
br label %exit_fn_400480
}

